import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';


const API_URL = 'http://192.168.1.142:3000/api';

function Home() {
    
  const [playerName, setPlayerName] = useState('');
  const [roomId, setRoomId] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [selectedGame, setSelectedGame] = useState(null);
  const navigate = useNavigate();

  const handleCreateRoom = async (gameType) => {
    if (!playerName.trim()) {
      setError('ุงูุฑุฌุงุก ุฅุฏุฎุงู ุงุณูู');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const response = await axios.post(`${API_URL}/game/create`, {
        playerName: playerName.trim(),
        gameType: gameType
      });

      const { roomId } = response.data;
      
      navigate('/lobby', { 
        state: { roomId, playerName, gameType, isHost: true } 
      });
    } catch (err) {
      setError(err.response?.data?.error || 'ุญุฏุซ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุบุฑูุฉ');
    } finally {
      setLoading(false);
    }
  };

  const handleJoinRoom = async () => {
    if (!playerName.trim()) {
      setError('ุงูุฑุฌุงุก ุฅุฏุฎุงู ุงุณูู');
      return;
    }

    if (!roomId.trim()) {
      setError('ุงูุฑุฌุงุก ุฅุฏุฎุงู ุฑูุฒ ุงูุบุฑูุฉ');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const response = await axios.post(`${API_URL}/game/join/${roomId.trim().toUpperCase()}`, {
        playerName: playerName.trim()
      });

      const { gameType } = response.data;
      
      navigate('/lobby', { 
        state: { 
          roomId: roomId.trim().toUpperCase(), 
          playerName, 
          gameType,
          isHost: false 
        } 
      });
    } catch (err) {
      setError(err.response?.data?.error || 'ุญุฏุซ ุฎุทุฃ ูู ุงูุงูุถูุงู ููุบุฑูุฉ');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-purple-600 to-indigo-600 flex items-center justify-center p-4">
      <div className="card max-w-md w-full">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-indigo-600 mb-2">
            ๐ฎ ุฃูุนุงุจ ุฌูุงุนูุฉ
          </h1>
          <p className="text-gray-600">
            ุงุฎุชุฑ ูุนุจุชู ุงูููุถูุฉ ูุชุญุฏู ุฃุตุฏูุงุฆู!
          </p>
        </div>

        <div className="mb-6">
          <label className="block text-gray-700 font-semibold mb-2">
            ุงุณูู
          </label>
          <input
            type="text"
            value={playerName}
            onChange={(e) => setPlayerName(e.target.value)}
            placeholder="ุฃุฏุฎู ุงุณูู"
            className="input-field"
            maxLength={20}
            disabled={loading}
          />
        </div>

        {error && (
          <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg text-center">
            {error}
          </div>
        )}

        {/* ุงุฎุชูุงุฑ ููุน ุงููุนุจุฉ */}
        {!selectedGame ? (
          <div className="space-y-4">
            <h3 className="text-center font-semibold text-gray-700 mb-3">
              ุงุฎุชุฑ ููุน ุงููุนุจุฉ:
            </h3>
            
            {/* ูุนุจุฉ ุงููุฆุงุช */}
            <button
              onClick={() => setSelectedGame('categories')}
              className="w-full p-6 bg-gradient-to-r from-purple-500 to-indigo-500 text-white rounded-xl hover:from-purple-600 hover:to-indigo-600 transition-all transform hover:scale-105 shadow-lg"
            >
              <div className="text-5xl mb-2">โก</div>
              <h3 className="text-xl font-bold mb-1">ุณุจุงู ุงููุฆุงุช</h3>
              <p className="text-sm text-purple-100">
                ุงูุชุจ ูููุงุช ูู ูุฆุงุช ูุฎุชููุฉ ุจุฃุณุฑุน ูุง ูููู
              </p>
            </button>

            {/* ูุนุจุฉ ุงูุฑุณู */}
            <button
              onClick={() => setSelectedGame('drawing')}
              className="w-full p-6 bg-gradient-to-r from-pink-500 to-rose-500 text-white rounded-xl hover:from-pink-600 hover:to-rose-600 transition-all transform hover:scale-105 shadow-lg"
            >
              <div className="text-5xl mb-2">๐จ</div>
              <h3 className="text-xl font-bold mb-1">ุงุฑุณู ูุฎููู</h3>
              <p className="text-sm text-pink-100">
                ุงุฑุณู ุงููููุฉ ูุฎูู ุฃุตุฏูุงุฆู ูุฎูููููุง
              </p>
            </button>
          </div>
        ) : (
          <div className="space-y-4">
            {/* ุฒุฑ ุงูุฑุฌูุน */}
            <button
              onClick={() => setSelectedGame(null)}
              className="text-gray-600 hover:text-gray-800 font-semibold mb-2"
            >
              โ ุงูุฑุฌูุน ูุงุฎุชูุงุฑ ุงููุนุจุฉ
            </button>

            {/* ุนุฑุถ ุงููุนุจุฉ ุงููุฎุชุงุฑุฉ */}
            <div className="p-4 bg-indigo-50 rounded-xl text-center mb-4">
              <div className="text-4xl mb-2">
                {selectedGame === 'categories' ? 'โก' : '๐จ'}
              </div>
              <h3 className="font-bold text-lg text-indigo-700">
                {selectedGame === 'categories' ? 'ุณุจุงู ุงููุฆุงุช' : 'ุงุฑุณู ูุฎููู'}
              </h3>
            </div>

            <button
              onClick={() => handleCreateRoom(selectedGame)}
              disabled={loading}
              className="btn-primary w-full mb-4 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'โณ ุฌุงุฑู ุงูุฅูุดุงุก...' : '๐ฎ ุฅูุดุงุก ุบุฑูุฉ ุฌุฏูุฏุฉ'}
            </button>

            <div className="relative my-6">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300"></div>
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-4 bg-white text-gray-500">ุฃู</span>
              </div>
            </div>

            <div className="mb-6">
              <label className="block text-gray-700 font-semibold mb-2">
                ุฑูุฒ ุงูุบุฑูุฉ
              </label>
              <input
                type="text"
                value={roomId}
                onChange={(e) => setRoomId(e.target.value.toUpperCase())}
                placeholder="ุฃุฏุฎู ุฑูุฒ ุงูุบุฑูุฉ (ูุซุงู: ABC123)"
                className="input-field"
                maxLength={6}
                disabled={loading}
              />
            </div>

            <button
              onClick={handleJoinRoom}
              disabled={loading}
              className="btn-secondary w-full disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'โณ ุฌุงุฑู ุงูุงูุถูุงู...' : '๐ช ุงูุงูุถูุงู ูุบุฑูุฉ'}
            </button>
          </div>
        )}

        <div className="mt-6 pt-6 border-t border-gray-200">
          <div className="text-center text-sm text-gray-600 space-y-2">
            <p>๐ก ููููู ุงููุนุจ ูุน 2-4 ูุงุนุจูู</p>
            <p>๐ฏ ุงุฎุชุฑ ุงููุนุจุฉ ุงูููุงุณุจุฉ ูู</p>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Home;